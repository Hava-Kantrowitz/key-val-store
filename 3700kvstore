#!/usr/bin/env python

import sys, socket, select, time, json, random

# Your ID number
my_id = sys.argv[1]

# The ID numbers of all the other replicas
replica_ids = sys.argv[2:]

# Connect to the network. All messages to/from other replicas and clients will
# occur over this socket
sock = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
sock.connect(my_id)

last = 0
leader = ""
term = 0
state = "follower"
alreadyVoted = 0
received = 0
timeout_num = random.randrange(150, 300, 1)

log = []

def make_fail(msg):
    return json.dumps({"src": msg["dst"], "dst": msg["src"], "leader": msg["leader"], "type": "fail", "MID": msg["MID"]})

def send_ballot(): 
    for val in replica_ids:
        sock.send(json.dumps({"src": my_id, "dst": val, "leader": "FFFF", "type": "ballot", "term": log[-1], "log_len": len(log) - 1}))

def start_election():
    #when thing timesout go here
    term += 1
    state = "candidate"
    num_votes = 1
    already_voted = 1
    received += 1
    send_ballot()

def recv_ballot(msg):
    #if already voted in current term ignore
    if alreadyVoted == 0: 
        index_ballot = msg["log_len"]
        index_voter = len(log) - 1
        term_ballot = msg["term"]
        term_voter = log[-1]
        if term_ballot >= term_voter: 
            if index_ballot >= index_ballot: 
                sock.send(json.dumps({"src": my_id, "dst": msg["src"], "leader": "FFFF", "type": "vote"}))
                alreadyVoted = 1
        
def recv_vote(): 
    num_votes = num_votes + 1
    received += 1
    if ((len(replica_ids) / 2) + 1) <= received: 
        end_election("win")  

def end_election(result):
    if result == "win":
        term += 1
        leader = my_id  
        for val in replica_ids:
            sock.send(json.dumps({"src": my_id, "dst": val, "leader": my_id, "type": "heartbeat"}))
    if result == "timeout":
        #go to the timeout 
    else: 
        #result is lose
        term += 1 
        leader = result 

while True:
    ready = select.select([sock], [], [], 0.1)[0]

    if sock in ready:
        msg_raw = sock.recv(32768)

        if len(msg_raw) == 0: continue
        msg = json.loads(msg_raw)

        if msg["leader"] == leader:
            last = time.time()

        if msg['type'] == "ballot":
            recv_ballot(msg)

        if msg['type'] == "vote":
            recv_vote()

        if msg['type'] == "heartbeat":
            end_election(msg["src"])

        # For now, ignore get() and put() from clients
        if msg['type'] in ['get', 'put']:
            log.append(term) 
            sock.send(make_fail(msg))

        # Handle noop messages. This may be removed from your final implementation
        elif msg['type'] == 'noop':
            print '%s received a NOOP from %s' % (msg['dst'], msg['src'])

    clock = time.time()
    msecs = clock.microsecond / 1000
    if clock - last > 2:
        # Send a no-op message to a random peer every two seconds, just for fun
        # You definitely want to remove this from your implementation
        #msg = {'src': my_id, 'dst': random.choice(replica_ids), 'leader': 'FFFF', 'type': 'noop'}
        #sock.send(json.dumps(msg))
        #print '%s sending a NOOP to %s' % (msg['src'], msg['dst'])

        #timeout happened call doelection
        start_election()
        last = clock
