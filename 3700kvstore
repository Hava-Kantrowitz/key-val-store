#!/usr/bin/env python3

import math, sys, socket, select, datetime, json, random

# Your ID number
my_id = sys.argv[1]

# The ID numbers of all the other replicas
replica_ids = sys.argv[2:]

# Connect to the network. All messages to/from other replicas and clients will
# occur over this socket
sock = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
sock.connect(my_id)

last = 0
leader = " "
term = 0
state = "follower"
previousTermVoted = -2
received = 0
timeout_num = random.randrange(150, 750, 1)
in_election = False
commitIndex = 0
nextIndex = {}
matchIndex = {}
new_entries = []

log = []
values = {} 

def make_fail(msg):
    return json.dumps({"src": msg["dst"], "dst": msg["src"], "leader": msg["leader"], "type": "fail", "MID": msg["MID"]})

def make_ok(msg, val): 
    global leader
    return json.dumps({"src": my_id, "dst": msg["src"], "leader": leader, "type": "ok", "MID": msg["MID"], "value": val})

def make_redirect(msg):
    global leader 
    if leader == " ":
        lead = "FFFF"
        #print("I HAVE NO HECKIN CLUE WHO THE LEADER IS") 
    else:
        lead = leader
    return json.dumps({"src": my_id, "dst": msg["src"], "leader": lead, "type": "redirect", "MID": msg["MID"]})

def send_ballot():
    if len(log) == 0:
        last_log_term = -1
    else:
        last_log_term = log[-1]["term"]
 
    for val in replica_ids:
        #print(my_id, "is sending ballot")
        sock.send(json.dumps({"src": my_id, "dst": val, "leader": "FFFF", "type": "ballot", "log_term": last_log_term, "log_len": len(log) - 1, "cur_term": term}).encode("ascii"))

def start_election():
    global term, state, previousTermVoted, received, in_election
    #when thing timesout go here
    #print("starting election")
    in_election = True
    term += 1
    state = "candidate"
    previousTermVoted = term
    received = 1
    send_ballot()

def recv_ballot(msg):
    global previousTermVoted, term
    #if already voted in current term ignore
    #print(my_id, "receiving ballot from", msg["src"])
    index_ballot = msg["log_len"]
    index_voter = len(log) - 1
    term_ballot = msg["log_term"]
    term_voter = -1 if len(log) == 0 else log[-1]["term"]
    cur_term_ballot = msg["cur_term"]
    #print(type(term_ballot), type(term_voter), previousTermVoted, term_ballot, term_voter)
    voted = False
    if cur_term_ballot < term: 
        #print("eeee")
        sock.send(json.dumps({"src": my_id, "dst": msg["src"], "leader": "FFFF", "type": "vote", "voteGranted": "false", "term": term}).encode("ascii"))
    elif term_ballot >= term_voter and previousTermVoted < term:
        if index_ballot >= index_voter:
            if (not in_election) or (in_election and cur_term_ballot > term):
                if cur_term_ballot > term: 
                    state = "follower" 
                sock.send(json.dumps({"src": my_id, "dst": msg["src"], "leader": "FFFF", "type": "vote", "voteGranted": "true", "term": term}).encode("ascii"))
                voted = True
                previousTermVoted = term_ballot
                #print("ddddddddddddddddd")
                #todo maybe set term to candidate's term
            
    if cur_term_ballot > term:
        term = cur_term_ballot

    if not voted:
        sock.send(json.dumps({"src": my_id, "dst": msg["src"], "leader": "FFFF", "type": "vote", "voteGranted": "false", "term": term}).encode("ascii"))
        #print("eeeeeeeeeeeeee")


def recv_vote(msg):
    global received, term
    #print("inelec", in_election)
    if in_election:
        #print(msg["voteGranted"], type(msg["voteGranted"]))
        if msg["voteGranted"] == "true":
            received += 1
            if (math.floor(len(replica_ids) / 2) + 1) <= received: 
                end_election("win")
        elif msg["term"] > term:
            term = msg["term"]
            end_election("cancel")

def end_election(result):
    global in_election, leader, term, previousTermVoted
    in_election = False
    if result == "win":
        #print(my_id, "won")
        for replica in replica_ids:
            nextIndex[replica] = len(log)
            matchIndex[replica] = 0

        leader = my_id  
        state = "leader"
        for val in replica_ids:
            sock.send(json.dumps({"src": my_id, "dst": val, "leader": my_id, "type": "heartbeat", "commitIndex": commitIndex, "term": term}).encode("ascii"))
    elif result == "cancel":
        #print(my_id, "canceled")
        state = "follower"
    else: 
        #print(my_id, "lost")
        #result is lose
        term = result["term"]
        leader = result["leader"]
        state = "follower"
        previousTermVoted = term

def send_append_entry(rep_id):
    #print("HIIIIIIIIIIIIIIIIIIIIII", nextIndex[rep_id], len(log))
    sock.send(json.dumps({"src": my_id, "dst": rep_id, "leader": my_id, "type": "appendEntry", "term": term, "prevLogTerm": log[nextIndex[rep_id]]["term"], "prevLogIndex": nextIndex[rep_id], "entries": new_entries, "leaderCommit": commitIndex}).encode("ascii"))

def append_entry(msg):
    global commitIndex
    success = True
    #print("idxxxxxxxxxxx", msg["prevLogIndex"], len(log))
    if len(log) > 0 and msg["term"] < term:
        #print("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", msg["term"], term)
        success = False
    elif len(log) > 0 and (msg["prevLogIndex"] >= len(log) or log[msg["prevLogIndex"]]["term"] != msg["prevLogTerm"]):
        #if msg["prevLogIndex"] >= len(log):
         #   print("asdfasdfasdfasdfdadsf")
        #else:
        #    print("bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb", log[msg["prevLogIndex"]]["term"], msg["prevLogTerm"])
        success = False  
    else:
        #print("ccccccccccccccccccccccccccccccccccc")
        #print(msg) 
        if len(log) > 0: 
            #print(log[msg["prevLogIndex"]])
            if log[msg["prevLogIndex"]]["term"] != msg["prevLogTerm"]:
                while len(log) > msg["prevLogIndex"]:
                    del log[len(log) - 1]

        log.extend(msg["entries"])

        if msg["leaderCommit"] > commitIndex:
            commitIndex = min(msg["leaderCommit"], len(log) - 1)

    sock.send(json.dumps({"src": my_id, "dst": msg["src"], "leader": msg["leader"], "type": "appendEntryResp", "term": term, "success": success}).encode("ascii"))


def append_entry_resp(msg):
    global term
    rep_id = msg["src"]
    if msg["success"]:
        nextIndex[rep_id] += len(new_entries)
        matchIndex[rep_id] += len(new_entries)
    else:
        term = msg["term"]
        #print("dec", rep_id, nextIndex[rep_id])
        nextIndex[rep_id] -= 1
        send_append_entry(rep_id)


while True:
    ready = select.select([sock], [], [], 0.1)[0]

    if sock in ready:
        msg_raw = sock.recv(32768).decode("ascii")

        if len(msg_raw) == 0: continue
        msg = json.loads(msg_raw)

        #if msg["leader"] == leader:
        #    last = time.time()

        if msg['type'] == "ballot":
            recv_ballot(msg)

        if msg['type'] == "vote":
            recv_vote(msg)

        if msg['type'] == "heartbeat":
            state = "follower"
            msecs = datetime.datetime.now().timestamp() * 1000
            last = msecs
            commitIndex = msg['commitIndex']  
            if in_election:
                end_election(msg)

        if msg["type"] == "appendEntry":
            append_entry(msg)

        if msg["type"] == "appendEntryResp":
            append_entry_resp(msg)

        if msg['type'] == "put":
            if leader == my_id:
                entry = {"key": msg["key"], "value": msg["value"], "term": term}
                log.append(entry)
                values[msg['key']] = msg['value']
                if msg['key'] in values.keys():
                    sock.send(make_ok(msg, "OK").encode("ascii"))
                    new_entries = [entry] #todo prevent sending new entries to out of date reps
                    for replica in replica_ids:
                        send_append_entry(replica)
                else: 
                    sock.send(make_fail(msg).encode("ascii"))
            else: 
                sock.send(make_redirect(msg).encode("ascii"))

        if msg['type'] == "get":
            if msg['key'] in values.keys():
                sock.send(make_ok(msg, values[msg['key']]).encode("ascii"))
            else: 
                sock.send(make_fail(msg).encode("ascii"))

    msecs = datetime.datetime.now().timestamp() * 1000
    #print("MSECS {0}, LAST {1}, MSECS-LAST {2}, TIMEOUT {3}".format(msecs, last, msecs-last, timeout_num))
    if (not (leader == my_id)) and  msecs - last > timeout_num:
        #timeout happened call doelection
        #print("WHATMYIDMAN", my_id)
        start_election()
        last = msecs

    if (leader == my_id) and msecs - last > 100:
        if leader == my_id: 
            for val in replica_ids: 
                sock.send(json.dumps({"src": my_id, "dst": val, "leader": my_id, "type": "heartbeat", "commitIndex": commitIndex, "term": term}).encode("ascii"))
            last = msecs 
