#!/usr/bin/env python

import sys, socket, select, time, json, random

# Your ID number
my_id = sys.argv[1]

# The ID numbers of all the other replicas
replica_ids = sys.argv[2:]

# Connect to the network. All messages to/from other replicas and clients will
# occur over this socket
sock = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
sock.connect(my_id)

last = 0
leader = ""
term = 0
state = "follower"

def make_fail(msg):
    return json.dumps({"src": msg["dst"], "dst": msg["src"], "leader": msg["leader"], "type": "fail", "MID": msg["MID"]})

def do_election():
    #when thing timesout go here
    term += 1
    state = "candidate"
    num_votes = 1
    

while True:
    ready = select.select([sock], [], [], 0.1)[0]

    if sock in ready:
        msg_raw = sock.recv(32768)

        if len(msg_raw) == 0: continue
        msg = json.loads(msg_raw)

        if msg["leader"] == leader:
            last = time.time()

        # For now, ignore get() and put() from clients
        if msg['type'] in ['get', 'put']:
            sock.send(make_fail(msg))

        # Handle noop messages. This may be removed from your final implementation
        elif msg['type'] == 'noop':
            print '%s received a NOOP from %s' % (msg['dst'], msg['src'])

    clock = time.time()
    if clock-last > 2:
        # Send a no-op message to a random peer every two seconds, just for fun
        # You definitely want to remove this from your implementation
        #msg = {'src': my_id, 'dst': random.choice(replica_ids), 'leader': 'FFFF', 'type': 'noop'}
        #sock.send(json.dumps(msg))
        #print '%s sending a NOOP to %s' % (msg['src'], msg['dst'])

        #timeout happened call doelection
        last = clock
